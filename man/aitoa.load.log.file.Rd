% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_log_file.R
\name{aitoa.load.log.file}
\alias{aitoa.load.log.file}
\title{Load a Single Log File}
\usage{
aitoa.load.log.file(file, keepColumns = .default.colums,
  makeTimeUnique = FALSE)
}
\arguments{
\item{file}{the log file to load}

\item{keepColumns}{the columns to keep, any vector containing elements
\code{"t"} (for time), \code{"f"} (for the objective value), and
\code{"fes"} (for the consumed FEs)}

\item{makeTimeUnique}{should we make the time indices unique (except maybe
for the first and last point)? This makes sense when we want to plot
diagrams over a time axis, as we then have removed redundant points right
away. If \code{makeTimeUnique==FALSE}, then there may be multiple
improvements at the same time index due to the resolution of the computer
clock (while each improvement will definitely have a unique FE).}
}
\value{
a data frame with the columns \code{t} (time in ms), \code{fes}
  (function evaluations), and \code{f} (objective value), all of which are
  numeric or integer valued, with integer type being preferred if it can be
  used without loss of precision
}
\description{
Load a log file and return the results as a data frame. The data
  frame will have three columns: \code{t} contains the time in milliseconds
  consumed since the start of the optimization process and is monotonously
  increasing. \code{fes} contains the number of objective function
  evaluations since the start of the optimization process and is strictly
  monotonously increasing. \code{f} contains the objective value and is
  strictly monotonously decreasing, with the except of the last point which
  might have the same objective value as the second-to-last point. Time and
  FEs have a resolution of 1 and a maximum value of \code{2^53 - 1}, as this
  is the highest integer value that can represented precisely with a double.
  If a higher value is encountered in any of the two columns, \code{stop}
  will be invoked, i.e., higher values are not permitted. In order to test
  for this, we use the 64 bit integers from the \code{bit64} package, since
  \code{R} does not support 64 bit integers natively.
}
